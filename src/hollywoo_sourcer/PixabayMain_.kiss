(import kiss_firefox.API)
(import js.lib.Promise)
(importAs js.html.XMLHttpRequest XHR)
(import hollywoo_sourcer.Message)
(var :Dynamic document js.Lib.global.document)
(var :Dynamic window js.Lib.global.window)

(var PIXABAY_PUBLIC_KEY "24159230-ce68ffe06827131f3f991f4f6")
(var API_URL "https://pixabay.com/api/")

(function syncedStorage []
    (API.browser.storage.sync.get (object queries (new Map<String,Dynamic>))))

(function :Void queryId [:String id :Map<String,Dynamic> cache]
    (let [request (new XHR)
            apiQuery "${API_URL}?key=${PIXABAY_PUBLIC_KEY}&id=$id"]
        (request.open "GET" apiQuery)
        (request.addEventListener "readystatechange"
            ->:Void
                (cond
                    ((and (= request.readyState 4) (= request.status 200))
                        (let [data (haxe.Json.parse request.responseText)]
                            (dictSet cache id data)
                            (API.browser.storage.sync.set (object queries cache))
                            (handleInfo data)))
                    ((= request.readyState 4)
                        // TODO report failure
                        )))
        (request.send)))

(function :Void handleInfo [:Dynamic info]
    (awaitLet [response (API.browser.runtime.sendMessage (object type "downloadPixabay" data [(first info.hits)]))]
        (print response)))

(API.browser.runtime.onMessage.addListener
    ->[:Message message sender sendResponse] 
        (case message
            ((object type "requestSource")
                (awaitLet [storage (syncedStorage)]
                    (let [:Map<String,Dynamic> cachedResults (dictGet storage "queries")
                            :String url window.location.href
                            parts (url.split "/")
                            _ (parts.pop)
                            titleAndId (parts.pop)
                            id (.pop (titleAndId.split "-"))]
                        (ifLet [cachedInfo (dictGet cachedResults id)]
                                (handleInfo cachedInfo)
                            (queryId id cachedResults)))))
            (otherwise)))